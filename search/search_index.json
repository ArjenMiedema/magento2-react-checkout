{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hyv\u00e4 Themes - Hyv\u00e4 Checkout hyva-themes/magento2-hyva-checkout This module contains a ReactApp that can be used to build a Headless Magento checkout. Compatible with Magento 2.3.4 and higher. Note: This module is heavily under construction. We recommend using the develop branch where a new version of the checkout is shaping into. Later, master would be replaced with develop . What does it do? It loads a React Checkout at [store-url]/hyva/checkout . When enabled in hyva_checkout/general/enable it replaces the default checkout. It depends on these two variables in localstorage: - signin_token to the customer section - cartId to the cart section For Hyv\u00e4 Themes of default Magento frontend, hyva-themes/magento2-graphql-tokens is needed to add these tokens to the customerSections .","title":"Home"},{"location":"#hyva-themes-hyva-checkout","text":"","title":"Hyv\u00e4 Themes - Hyv\u00e4 Checkout"},{"location":"#hyva-themesmagento2-hyva-checkout","text":"This module contains a ReactApp that can be used to build a Headless Magento checkout. Compatible with Magento 2.3.4 and higher. Note: This module is heavily under construction. We recommend using the develop branch where a new version of the checkout is shaping into. Later, master would be replaced with develop .","title":"hyva-themes/magento2-hyva-checkout"},{"location":"#what-does-it-do","text":"It loads a React Checkout at [store-url]/hyva/checkout . When enabled in hyva_checkout/general/enable it replaces the default checkout. It depends on these two variables in localstorage: - signin_token to the customer section - cartId to the cart section For Hyv\u00e4 Themes of default Magento frontend, hyva-themes/magento2-graphql-tokens is needed to add these tokens to the customerSections .","title":"What does it do?"},{"location":"at_a_glance/","text":"Hyva Checkout At A Glance Hyva checkout is essentially a one page checkout solution. So the whole checkout looks like below: It contains following sections Email Section Email section has mainly two purpose. It allows us to continue in a guest checkout mode or we can continue checkout after logged-in In the guest checkout mode, which is the default mode, there is an email address field. Upon providing the email address and save, it will attach the email address to the cart. In the logged-in checkout mode, the user will be provided with username and password fields. Upon submit, if the login is successful, the cart is now merged with the customer cart (if any) and then proceed as logged-in checkout. Customer addresses will be listed out in the address sections to pick up in this case. If the login unsuccessful, then it will be treated as guest checkout. the email address provided will be attached to the cart and then proceed as the first case. You can read in depth about email section in the \"Checkout - Email Section\" page. Billing Address Section Billing address section allows to set a billing address to the cart. By default billing address would be treated same as the shipping address. However you can alter this by unchecking the checkbox. This will show the billing address fields and you can fill out the details there. In the case of logged-in checkout, if the customer has billing address options, then it will be listed out as address cards. You can pick any one of the address or create a fresh address. You can read in depth about the billing address section in the \"Checkout - Billing Address\" page. Shipping Address Section Shipping address section allows to set a shipping address to the cart Shipping address section will show the shipping address fields by default. You can provide the shipping address and upon submit, it will save the shipping address and set the same shipping address as the billing address if the billing address set same as the shipping address. In the case of logged-in checkout, if the customer has shipping address options, then it will be listed out as address cards. You can pick any one of the address or create a fresh address. You can read in depth about the billing address section in the \"Checkout - Shipping Address\" page. Shipping Methods Section Based on the cart info, it will be showing the availabe shipping methods as radio option. You can pick up any of the shipping method. upon update, it will set the opted shipping method to the cart Payment Methods Section Baded on the cart info, it will be showing the available payment methods as radio option. You can choose the correct option there. Upon update, it willset the opted payment method to the cart. Cart Items Section Cart items section will show the product involving in the cart. You can update the quantity of cart items from the checkout page itsef. You can also remove a cart item from the checkout page itself. Totals Section Each of the above section will alter the cart data as the user fill out the form. According to the user actions, the totals would change and those changes will be shown in real time in the total section. Place Order Place order button converts the cart to an order and then show the order success page.","title":"Checkout - at a glance"},{"location":"at_a_glance/#hyva-checkout-at-a-glance","text":"Hyva checkout is essentially a one page checkout solution. So the whole checkout looks like below: It contains following sections","title":"Hyva Checkout At A Glance"},{"location":"at_a_glance/#email-section","text":"Email section has mainly two purpose. It allows us to continue in a guest checkout mode or we can continue checkout after logged-in In the guest checkout mode, which is the default mode, there is an email address field. Upon providing the email address and save, it will attach the email address to the cart. In the logged-in checkout mode, the user will be provided with username and password fields. Upon submit, if the login is successful, the cart is now merged with the customer cart (if any) and then proceed as logged-in checkout. Customer addresses will be listed out in the address sections to pick up in this case. If the login unsuccessful, then it will be treated as guest checkout. the email address provided will be attached to the cart and then proceed as the first case. You can read in depth about email section in the \"Checkout - Email Section\" page.","title":"Email Section"},{"location":"at_a_glance/#billing-address-section","text":"Billing address section allows to set a billing address to the cart. By default billing address would be treated same as the shipping address. However you can alter this by unchecking the checkbox. This will show the billing address fields and you can fill out the details there. In the case of logged-in checkout, if the customer has billing address options, then it will be listed out as address cards. You can pick any one of the address or create a fresh address. You can read in depth about the billing address section in the \"Checkout - Billing Address\" page.","title":"Billing Address Section"},{"location":"at_a_glance/#shipping-address-section","text":"Shipping address section allows to set a shipping address to the cart Shipping address section will show the shipping address fields by default. You can provide the shipping address and upon submit, it will save the shipping address and set the same shipping address as the billing address if the billing address set same as the shipping address. In the case of logged-in checkout, if the customer has shipping address options, then it will be listed out as address cards. You can pick any one of the address or create a fresh address. You can read in depth about the billing address section in the \"Checkout - Shipping Address\" page.","title":"Shipping Address Section"},{"location":"at_a_glance/#shipping-methods-section","text":"Based on the cart info, it will be showing the availabe shipping methods as radio option. You can pick up any of the shipping method. upon update, it will set the opted shipping method to the cart","title":"Shipping Methods Section"},{"location":"at_a_glance/#payment-methods-section","text":"Baded on the cart info, it will be showing the available payment methods as radio option. You can choose the correct option there. Upon update, it willset the opted payment method to the cart.","title":"Payment Methods Section"},{"location":"at_a_glance/#cart-items-section","text":"Cart items section will show the product involving in the cart. You can update the quantity of cart items from the checkout page itsef. You can also remove a cart item from the checkout page itself.","title":"Cart Items Section"},{"location":"at_a_glance/#totals-section","text":"Each of the above section will alter the cart data as the user fill out the form. According to the user actions, the totals would change and those changes will be shown in real time in the total section.","title":"Totals Section"},{"location":"at_a_glance/#place-order","text":"Place order button converts the cart to an order and then show the order success page.","title":"Place Order"},{"location":"build/","text":"How can build the Hyv\u00e4-Checkout app In the build process, you are making the react application ready for use as a Magento module. In a normal circumstance, you don't need to do this process. However, if you want to customize the react app in a way you needed, then you need to alter the react components by your own. In this case, knowing the build process is necessary in order to get your changes reflected in the site. Prerequisites It is required that you have the tool csso-cli installed globally. It is using to optimize the CSS file that would be generated in the build process. npm i -g csso-cli How can you build the app You can build the react app with the below command NODE_ENV=production npm run build What happens when we build the react application? Primarily 2 goals here. Create a fully optimized style file that can be included in the Magento site (if needed) Create a fully optimized production build of the react app into a js file that can be included in the Magento site. The console output of the build process is given below: $ NODE_ENV=production npm run build > tailwindcss build src/asset/css/tailwind.css -o public/tailwind.output.css tailwindcss 1.9.6 \ud83d\ude80 Building: src/asset/css/tailwind.css \u2705 Finished in 2.61 s \ud83d\udce6 Size: 18.43KB \ud83d\udcbe Saved to public/tailwind.output.css > npx csso public/tailwind.output.css --output public/styles.css > react-app-rewired build Creating an optimized production build... Compiled successfully. File sizes after gzip: 70.76 KB ../view/frontend/web/js/react-checkout.js > cp public/styles.css ../view/frontend/web/css/styles.css && npm run output-success Done! As you can see above, the very first step is tailwindcss build process. It using the tailwindcss base file located at src/reactapp/src/asset/css/tailwind.css . In this build process, it will be basically doing the purge operation. The resulting file is located at src/reactapp/public/tailwind.output.css . This file is what we are using in the react app if you open it in the development mode. Next step is optimizing the src/reactapp/public/tailwind.output.css file. We are using the tool csso-cli for that. The Optimized css file can be found at src/reactapp/public/styles.css . Next, it will be creating the production build of the react app and the resulting file will be store in the location src/view/frontend/web/js/react-checkout.js . This js file will be included in the DOM by the module and thus it will do the react magic on the page. Finally, the optimized src/reactapp/public/styles.css file will be copied over to the location src/view/frontend/web/css/styles.css . This style file can be included in the page if in case you are using this module out of hyva. To do this, file: src/view/frontend/layout/hyvacheckout_checkout_index.xml , uncomment the following line you would find there. <css src=\"Hyva_Checkout::css/styles.css\" defer=\"defer\"/>","title":"How can build"},{"location":"build/#how-can-build-the-hyva-checkout-app","text":"In the build process, you are making the react application ready for use as a Magento module. In a normal circumstance, you don't need to do this process. However, if you want to customize the react app in a way you needed, then you need to alter the react components by your own. In this case, knowing the build process is necessary in order to get your changes reflected in the site.","title":"How can build the Hyv\u00e4-Checkout app"},{"location":"build/#prerequisites","text":"It is required that you have the tool csso-cli installed globally. It is using to optimize the CSS file that would be generated in the build process. npm i -g csso-cli","title":"Prerequisites"},{"location":"build/#how-can-you-build-the-app","text":"You can build the react app with the below command NODE_ENV=production npm run build","title":"How can you build the app"},{"location":"build/#what-happens-when-we-build-the-react-application","text":"Primarily 2 goals here. Create a fully optimized style file that can be included in the Magento site (if needed) Create a fully optimized production build of the react app into a js file that can be included in the Magento site. The console output of the build process is given below: $ NODE_ENV=production npm run build > tailwindcss build src/asset/css/tailwind.css -o public/tailwind.output.css tailwindcss 1.9.6 \ud83d\ude80 Building: src/asset/css/tailwind.css \u2705 Finished in 2.61 s \ud83d\udce6 Size: 18.43KB \ud83d\udcbe Saved to public/tailwind.output.css > npx csso public/tailwind.output.css --output public/styles.css > react-app-rewired build Creating an optimized production build... Compiled successfully. File sizes after gzip: 70.76 KB ../view/frontend/web/js/react-checkout.js > cp public/styles.css ../view/frontend/web/css/styles.css && npm run output-success Done! As you can see above, the very first step is tailwindcss build process. It using the tailwindcss base file located at src/reactapp/src/asset/css/tailwind.css . In this build process, it will be basically doing the purge operation. The resulting file is located at src/reactapp/public/tailwind.output.css . This file is what we are using in the react app if you open it in the development mode. Next step is optimizing the src/reactapp/public/tailwind.output.css file. We are using the tool csso-cli for that. The Optimized css file can be found at src/reactapp/public/styles.css . Next, it will be creating the production build of the react app and the resulting file will be store in the location src/view/frontend/web/js/react-checkout.js . This js file will be included in the DOM by the module and thus it will do the react magic on the page. Finally, the optimized src/reactapp/public/styles.css file will be copied over to the location src/view/frontend/web/css/styles.css . This style file can be included in the page if in case you are using this module out of hyva. To do this, file: src/view/frontend/layout/hyvacheckout_checkout_index.xml , uncomment the following line you would find there. <css src=\"Hyva_Checkout::css/styles.css\" defer=\"defer\"/>","title":"What happens when we build the react application?"},{"location":"customize/","text":"How To Customize Hyva Checkout Hyva checkout is a Magento 2 module which holds a react app inside it. So when you want to customize the checkout, you need to work with the react app embedded inside the module. Where is the react app You can find the react app at src/reactapp . Setting up react app cd into the react application cd src/reactapp install the packages npm install Configure your Magento 2 backend site. There is two ways you can do this: 3.a - The cleanest approach is here. create .env file in src/reactapp directory and specify your site as shown below REACT_APP_BASE_URL=http://your-m2-site.com 3.b - A hacky trick would be specify your site as your proxy in the package.json . There is already an entry there. Replace it with yours \"proxy\": \"http://your-m2-site.com\", Use only one option above. Don't do both Start App In order to start the application npm start The app is now available at http://localhost:3000 As soon as the react app kick start, it will show a prompt box to input the cart id. Well, without the a valid cart, the checkout page is useless. So provide a valid cart id and then you are good to go.","title":"How to customize"},{"location":"customize/#how-to-customize-hyva-checkout","text":"Hyva checkout is a Magento 2 module which holds a react app inside it. So when you want to customize the checkout, you need to work with the react app embedded inside the module.","title":"How To Customize Hyva Checkout"},{"location":"customize/#where-is-the-react-app","text":"You can find the react app at src/reactapp .","title":"Where is the react app"},{"location":"customize/#setting-up-react-app","text":"cd into the react application cd src/reactapp install the packages npm install Configure your Magento 2 backend site. There is two ways you can do this: 3.a - The cleanest approach is here. create .env file in src/reactapp directory and specify your site as shown below REACT_APP_BASE_URL=http://your-m2-site.com 3.b - A hacky trick would be specify your site as your proxy in the package.json . There is already an entry there. Replace it with yours \"proxy\": \"http://your-m2-site.com\", Use only one option above. Don't do both","title":"Setting up react app"},{"location":"customize/#start-app","text":"In order to start the application npm start The app is now available at http://localhost:3000 As soon as the react app kick start, it will show a prompt box to input the cart id. Well, without the a valid cart, the checkout page is useless. So provide a valid cart id and then you are good to go.","title":"Start App"},{"location":"how_to_use/","text":"How to use this module Hyva-Checkout is essentially a Magento 2 module which provides a fast and extendible checkout experience in a magento site. Since it is a part of Hyva-Themes, it is natural to assume it would only work with hyva-themes. But, the truth is, it is not. You can use this module with any Magento 2 sites. For example, Magento 2 sites using the luma or blank theme Magento 2 sites using a theme that inhertis luma/blank theme Magento 2 sites using the hyva-theme Magento 2 sites that works in headless Magento 2 sites that uses any kind of PWA. Any tweaks necessary if the site is not using hyva-theme? Well, the hyva-checkout using the tailwindcss in order to style the checkout page. Hence, it is important to include the checkout page style css file if your site is not using tailwindcss. It is handy to do this job too. To include the css file, all you need to do is uncomment the css file entry in the below file: File: src/view/frontend/layout/hyvacheckout_checkout_index.xml <css src=\"Hyva_Checkout::css/styles.css\" defer=\"defer\"/> Changes you want to do in a hyva-theme based site Both hyva-theme and hyva-checkout uses tailwindcss to style the pages. In a hyva-theme based site, it does not make sense to include Hyva_Checkout::css/styles.css stylesheet because of the following reasons. It adds an additional style sheet in the site. One more style sheet means one more reder blocking in the browser The style sheet holds lot of duplicated styles since both using the tailwindcss. Due to this, it is better to add hyva-checkout components in the tailwindcss purge directory list in your hyva-theme based site. You can find more details of this in the official documentation of hyva: Tailwind Purging settings Below is the bare minium things you need to do You need setup a child theme in your site. It should be inherited from Hyva/default theme. For the sake of simplicity, I am calling this child theme as Hyva/custom . Copy over the web directory from vendor/hyva-themes/magento2-default-theme/web/ to your own theme app/design/frontend/Hyva/custom/web/ Edit the tailwind.config.js file inside your theme and add following lines inside purge directory list. module.exports = { ... purge: { content: [ ... // Hyva checkout components '../../../../../../../vendor/hyva-themes/magento2-hyva-checkout/src/reactapp/src/components/*.jsx', '../../../../../../../vendor/hyva-themes/magento2-hyva-checkout/src/reactapp/src/components/**/*.jsx' ... ] } } ... With these changes, Hyva-checkout styles will be also considered by your theme and thus you will see a stylish hyva checkout page by default.","title":"How to use"},{"location":"how_to_use/#how-to-use-this-module","text":"Hyva-Checkout is essentially a Magento 2 module which provides a fast and extendible checkout experience in a magento site. Since it is a part of Hyva-Themes, it is natural to assume it would only work with hyva-themes. But, the truth is, it is not. You can use this module with any Magento 2 sites. For example, Magento 2 sites using the luma or blank theme Magento 2 sites using a theme that inhertis luma/blank theme Magento 2 sites using the hyva-theme Magento 2 sites that works in headless Magento 2 sites that uses any kind of PWA.","title":"How to use this module"},{"location":"how_to_use/#any-tweaks-necessary-if-the-site-is-not-using-hyva-theme","text":"Well, the hyva-checkout using the tailwindcss in order to style the checkout page. Hence, it is important to include the checkout page style css file if your site is not using tailwindcss. It is handy to do this job too. To include the css file, all you need to do is uncomment the css file entry in the below file: File: src/view/frontend/layout/hyvacheckout_checkout_index.xml <css src=\"Hyva_Checkout::css/styles.css\" defer=\"defer\"/>","title":"Any tweaks necessary if the site is not using hyva-theme?"},{"location":"how_to_use/#changes-you-want-to-do-in-a-hyva-theme-based-site","text":"Both hyva-theme and hyva-checkout uses tailwindcss to style the pages. In a hyva-theme based site, it does not make sense to include Hyva_Checkout::css/styles.css stylesheet because of the following reasons. It adds an additional style sheet in the site. One more style sheet means one more reder blocking in the browser The style sheet holds lot of duplicated styles since both using the tailwindcss. Due to this, it is better to add hyva-checkout components in the tailwindcss purge directory list in your hyva-theme based site. You can find more details of this in the official documentation of hyva: Tailwind Purging settings Below is the bare minium things you need to do You need setup a child theme in your site. It should be inherited from Hyva/default theme. For the sake of simplicity, I am calling this child theme as Hyva/custom . Copy over the web directory from vendor/hyva-themes/magento2-default-theme/web/ to your own theme app/design/frontend/Hyva/custom/web/ Edit the tailwind.config.js file inside your theme and add following lines inside purge directory list. module.exports = { ... purge: { content: [ ... // Hyva checkout components '../../../../../../../vendor/hyva-themes/magento2-hyva-checkout/src/reactapp/src/components/*.jsx', '../../../../../../../vendor/hyva-themes/magento2-hyva-checkout/src/reactapp/src/components/**/*.jsx' ... ] } } ... With these changes, Hyva-checkout styles will be also considered by your theme and thus you will see a stylish hyva checkout page by default.","title":"Changes you want to do in a hyva-theme based site"},{"location":"i18n/","text":"Internationalization Hyva checkout supports Internationalization. It uses JSON files to keep your translation keywords. All of your translation JSON files needs to be kept under src/reactapp/public/i18n directory. We have already provided en_US.json file for your reference there. How to add a new language translation support You need to put your translation file inside src/reactapp/public/i18n directory. The format of your file is [locale_code].json . For example, for a German store, it should be de_DE.json . This is all you need to do. How can we translate strings in the component? There is a helper function __() available, similar to the translation facility in Magento templates. You can find this helper function at src/reactapp/src/i18n/__.js . For an example, please see the PlaceOrder component. File: src/reactapp/src/components/PlaceOrder.jsx import React from 'react'; import { __ } from '../i18n'; function PlaceOrder() { return ( <div className=\"flex items-center justify-center h-24\"> <Button variant=\"warning\" big disable={!isValid} click={() => submitHandler(values)} > {__('Place Order')} </Button> </div> ); } export default PlaceOrder; see the import of the function __() and usage. It is that simple. Another job __() function does is, it accepts any number of parameters which will be replaced in the string at the right position. For example, if you want to print the string: My name is Julius Caesar . You can do this: const firstName = 'Julius'; const lastName = 'Caesar'; __('My name is {} {}', firstName, lastName); In the string {} part indicates it is the dynamic part and needs to be replaced with the other parameters passing to the __() . These parameters will be replaced in the {} part in the given order. How it works It all starts with the root element on which react app is acted on. In the hyva-module, the root DOM looks like below: File: src/view/frontend/templates/react-container.phtml <div id=\"react-checkout\" data-language=\"<?= $localeProvider->getLocaleCode() ?>\" data-static_file_path=\"<?= $block->getViewFileUrl('Hyva_Checkout/js') ?>\" > ... </div> As you can see there is the data attribute data-language which will represent the current store locale. For example, if you are viewing a UK store, then it will look like <div id=\"react-checkout\" data-language=\"en_GB\" data-static_file_path=\"https://example.com/static/version1619794305/frontend/Magento/luma/en_GB/Hyva_Checkout/js\" > so en_GB is the locale code here. In this case, we need to keep our translation json file at src/reactapp/public/i18n/en_GB.json . React app will fetch the correct tanslation json file based on this and load it. You also note that there is another data attirbute which is data-static_file_path . This is needed in order to load the translation json file as a static asset in a hyva-theme or in luma-theme. So we copy all the translation json files available in src/reactapp/public/i18n directory into the directory src/view/frontend/web/js/i18n during the app build process and thus these static json files will be used by the production build.","title":"Internationalization"},{"location":"i18n/#internationalization","text":"Hyva checkout supports Internationalization. It uses JSON files to keep your translation keywords. All of your translation JSON files needs to be kept under src/reactapp/public/i18n directory. We have already provided en_US.json file for your reference there.","title":"Internationalization"},{"location":"i18n/#how-to-add-a-new-language-translation-support","text":"You need to put your translation file inside src/reactapp/public/i18n directory. The format of your file is [locale_code].json . For example, for a German store, it should be de_DE.json . This is all you need to do.","title":"How to add a new language translation support"},{"location":"i18n/#how-can-we-translate-strings-in-the-component","text":"There is a helper function __() available, similar to the translation facility in Magento templates. You can find this helper function at src/reactapp/src/i18n/__.js . For an example, please see the PlaceOrder component. File: src/reactapp/src/components/PlaceOrder.jsx import React from 'react'; import { __ } from '../i18n'; function PlaceOrder() { return ( <div className=\"flex items-center justify-center h-24\"> <Button variant=\"warning\" big disable={!isValid} click={() => submitHandler(values)} > {__('Place Order')} </Button> </div> ); } export default PlaceOrder; see the import of the function __() and usage. It is that simple. Another job __() function does is, it accepts any number of parameters which will be replaced in the string at the right position. For example, if you want to print the string: My name is Julius Caesar . You can do this: const firstName = 'Julius'; const lastName = 'Caesar'; __('My name is {} {}', firstName, lastName); In the string {} part indicates it is the dynamic part and needs to be replaced with the other parameters passing to the __() . These parameters will be replaced in the {} part in the given order.","title":"How can we translate strings in the component?"},{"location":"i18n/#how-it-works","text":"It all starts with the root element on which react app is acted on. In the hyva-module, the root DOM looks like below: File: src/view/frontend/templates/react-container.phtml <div id=\"react-checkout\" data-language=\"<?= $localeProvider->getLocaleCode() ?>\" data-static_file_path=\"<?= $block->getViewFileUrl('Hyva_Checkout/js') ?>\" > ... </div> As you can see there is the data attribute data-language which will represent the current store locale. For example, if you are viewing a UK store, then it will look like <div id=\"react-checkout\" data-language=\"en_GB\" data-static_file_path=\"https://example.com/static/version1619794305/frontend/Magento/luma/en_GB/Hyva_Checkout/js\" > so en_GB is the locale code here. In this case, we need to keep our translation json file at src/reactapp/public/i18n/en_GB.json . React app will fetch the correct tanslation json file based on this and load it. You also note that there is another data attirbute which is data-static_file_path . This is needed in order to load the translation json file as a static asset in a hyva-theme or in luma-theme. So we copy all the translation json files available in src/reactapp/public/i18n directory into the directory src/view/frontend/web/js/i18n during the app build process and thus these static json files will be used by the production build.","title":"How it works"},{"location":"installation/","text":"Installation Install via composer composer config repositories.hyva-themes/magento2-hyva-checkout git git@github.com:hyva-themes/magento2-hyva-checkout.git composer require hyva-themes/magento2-hyva-checkout Enable module bin/magento setup:upgrade Configuration In the Magento Backend Configuration: HYVA THEMES->Checkout->General Settings->Enable The configutation path is hyva_checkout/general/enable","title":"Installation"},{"location":"installation/#installation","text":"Install via composer composer config repositories.hyva-themes/magento2-hyva-checkout git git@github.com:hyva-themes/magento2-hyva-checkout.git composer require hyva-themes/magento2-hyva-checkout Enable module bin/magento setup:upgrade","title":"Installation"},{"location":"installation/#configuration","text":"In the Magento Backend Configuration: HYVA THEMES->Checkout->General Settings->Enable The configutation path is hyva_checkout/general/enable","title":"Configuration"},{"location":"payment-integration/","text":"Payment Integration In Hyv\u00e4 Checkout, the payment options will be shown as radio inputs by default. You can choose the option and place the order, and everything works out of the box. But showing just a radio input box and allowing you to select/deselect them is not what you needed for all payment options. Some payment methods need different behaviour. Also, some payment methods need a separate flow when we perform the \"place order\" action. To help you out in such cases, Hyv\u00e4 Checkout already possesses some superpowers which we will see in a short time. Payment Supports Payment methods integration is in progress. We don't have any plans to keep payment components as part of Hyv\u00e4 Checkout. But, we will be maintaining separate payment repositories which will hold the custom payment method components which you can use with Hyv\u00e4 Checkout seamlessly. Below, we are listing the payment repositories, and each repository will have specific instructions about its usage. hyva-themes/magento2-hyva-checkout-payone We are open to contributions here as the payment options available out there are many, and you all can help you out to grow the above list. Now, it is time to get to know some technical aspect of the payment integration which you can do with Hyv\u00e4 Checkout. How can we collect the payment configurations? Depending upon the payment methods, you may have some special configuration settings in your store. Usually, you do this under Stores > Configuration . If you are familiar with the default Magento 2 checkout page, then you may know that Magento 2 passes this configuration via a global variable which you can find at window.checkoutConfig . To collect these checkout configurations, we have a ViewModel available in the module. You can find this ViewModel in the path src/ViewModel/CheckoutConfigProvider.php . So to make payment configurations available to the checkout page, you need to do the following steps. Include the ViewModel via the layout file. File: src/view/frontend/layout/hyvacheckout_checkout_index.xml <?xml version=\"1.0\"?> <page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"> ... <body> <referenceContainer name=\"content\"> <block name=\"checkout.container\" cacheable=\"false\" template=\"Hyva_Checkout::react-container.phtml\"> <arguments> ... <argument name=\"checkout_config_provider\" xsi:type=\"object\">Hyva\\Checkout\\ViewModel\\CheckoutConfigProvider</argument> </arguments> </block> </referenceContainer> ... </body> </page> Pass the payment configuration via data-payment attribute. File: src/view/frontend/templates/react-container.phtml <?php ... /** @var \\Magento\\Framework\\Escaper $escaper */ /** @var \\Hyva\\Checkout\\ViewModel\\CheckoutConfigProvider $configProvider */ $configProvider = $block->getCheckoutConfigProvider(); ... ?> <div id=\"react-checkout\" ... data-payment=\"<?= $escaper->escapeHtmlAttr($configProvider->getConfig()) ?>\" > ... </div> With these changes in place, now the react app has access to the payment configurations, and it can be used in the application according to your need. Custom Payment Renderer As already stated, by default, all payment methods appear as a radio input. But Hyv\u00e4 Checkout allows using a custom renderer for any payment methods. All you need to do is add your custom payment method component in the src/reactapp/src/components/paymentMethod/customRenderers.js file. This js file exports an empty object ( {} ) by default. But if you specify your custom payment method component, then the react app will use your custom component in order to render the payment method. For example, File: src/reactapp/src/components/paymentMethod/customRenderers.js import CreditCard from '../payone/components/creditCard/CreditCard'; export default { payone_creditcard: CreditCard, }; Here payone_creditcard is the payment method code and CreditCard is the custom payment method component. How To Interact With Place Order If your payment method needs some special functions to carry out or if your payment method wants to alter the behaviour of place an order, then Hyv\u00e4 Checkout provides some features out of the box to help you out. File: src/reactapp/src/context/Form/CheckoutFormProvider.jsx ... function CheckoutFormProvider({ children }) { ... const [paymentActionList, setPaymentActions] = useState({}); ... const registerPaymentAction = useCallback( (paymentMethodCode, paymentMethodAction) => { setPaymentActions(actions => ({ ...actions, [paymentMethodCode]: paymentMethodAction, })); }, [setPaymentActions] ); ... } ... Here CheckoutFormProvider is one of the super parent components that wraps react app. As you can see in the code it has a state paymentActionList which can be populated with any custom payment action you want to perform when the \"place order\" action happens. See the registerPaymentAction function. This function is available for all the child components and thus a custom payment method component can use it to register a custom \"place order\" behaviour. Suppose you have a custom payment method component PayOneCreditCard and it looks like below function PayOneCreditCard({ method, selected, actions }) { const { registerPaymentAction } = useCheckoutFormContext(); // custom \"place order\" submit action const paymentSubmitHandler = useCallback( async values => { console.log({ values }); alert('yeeeha'); }, [] ); // registering custom \"place order\" action for the payment method useEffect(() => { registerPaymentAction('payone_creditcard', paymentSubmitHandler); }, [registerPaymentAction, paymentSubmitHandler]); return ( // custom payment method JSX here ); } So in the useEffect , we are registering custom place order action for the payment method. Now when the user opted payone_creditcard as the payment option and then click on the \"Place Order\" button, it will use the paymentSubmitHandler in this component to process the order. So now the payment method needs to convert the quote to order according to its need and then redirect the user to the success page.","title":"Payment Integration"},{"location":"payment-integration/#payment-integration","text":"In Hyv\u00e4 Checkout, the payment options will be shown as radio inputs by default. You can choose the option and place the order, and everything works out of the box. But showing just a radio input box and allowing you to select/deselect them is not what you needed for all payment options. Some payment methods need different behaviour. Also, some payment methods need a separate flow when we perform the \"place order\" action. To help you out in such cases, Hyv\u00e4 Checkout already possesses some superpowers which we will see in a short time.","title":"Payment Integration"},{"location":"payment-integration/#payment-supports","text":"Payment methods integration is in progress. We don't have any plans to keep payment components as part of Hyv\u00e4 Checkout. But, we will be maintaining separate payment repositories which will hold the custom payment method components which you can use with Hyv\u00e4 Checkout seamlessly. Below, we are listing the payment repositories, and each repository will have specific instructions about its usage. hyva-themes/magento2-hyva-checkout-payone We are open to contributions here as the payment options available out there are many, and you all can help you out to grow the above list. Now, it is time to get to know some technical aspect of the payment integration which you can do with Hyv\u00e4 Checkout.","title":"Payment Supports"},{"location":"payment-integration/#how-can-we-collect-the-payment-configurations","text":"Depending upon the payment methods, you may have some special configuration settings in your store. Usually, you do this under Stores > Configuration . If you are familiar with the default Magento 2 checkout page, then you may know that Magento 2 passes this configuration via a global variable which you can find at window.checkoutConfig . To collect these checkout configurations, we have a ViewModel available in the module. You can find this ViewModel in the path src/ViewModel/CheckoutConfigProvider.php . So to make payment configurations available to the checkout page, you need to do the following steps. Include the ViewModel via the layout file. File: src/view/frontend/layout/hyvacheckout_checkout_index.xml <?xml version=\"1.0\"?> <page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"> ... <body> <referenceContainer name=\"content\"> <block name=\"checkout.container\" cacheable=\"false\" template=\"Hyva_Checkout::react-container.phtml\"> <arguments> ... <argument name=\"checkout_config_provider\" xsi:type=\"object\">Hyva\\Checkout\\ViewModel\\CheckoutConfigProvider</argument> </arguments> </block> </referenceContainer> ... </body> </page> Pass the payment configuration via data-payment attribute. File: src/view/frontend/templates/react-container.phtml <?php ... /** @var \\Magento\\Framework\\Escaper $escaper */ /** @var \\Hyva\\Checkout\\ViewModel\\CheckoutConfigProvider $configProvider */ $configProvider = $block->getCheckoutConfigProvider(); ... ?> <div id=\"react-checkout\" ... data-payment=\"<?= $escaper->escapeHtmlAttr($configProvider->getConfig()) ?>\" > ... </div> With these changes in place, now the react app has access to the payment configurations, and it can be used in the application according to your need.","title":"How can we collect the payment configurations?"},{"location":"payment-integration/#custom-payment-renderer","text":"As already stated, by default, all payment methods appear as a radio input. But Hyv\u00e4 Checkout allows using a custom renderer for any payment methods. All you need to do is add your custom payment method component in the src/reactapp/src/components/paymentMethod/customRenderers.js file. This js file exports an empty object ( {} ) by default. But if you specify your custom payment method component, then the react app will use your custom component in order to render the payment method. For example, File: src/reactapp/src/components/paymentMethod/customRenderers.js import CreditCard from '../payone/components/creditCard/CreditCard'; export default { payone_creditcard: CreditCard, }; Here payone_creditcard is the payment method code and CreditCard is the custom payment method component.","title":"Custom Payment Renderer"},{"location":"payment-integration/#how-to-interact-with-place-order","text":"If your payment method needs some special functions to carry out or if your payment method wants to alter the behaviour of place an order, then Hyv\u00e4 Checkout provides some features out of the box to help you out. File: src/reactapp/src/context/Form/CheckoutFormProvider.jsx ... function CheckoutFormProvider({ children }) { ... const [paymentActionList, setPaymentActions] = useState({}); ... const registerPaymentAction = useCallback( (paymentMethodCode, paymentMethodAction) => { setPaymentActions(actions => ({ ...actions, [paymentMethodCode]: paymentMethodAction, })); }, [setPaymentActions] ); ... } ... Here CheckoutFormProvider is one of the super parent components that wraps react app. As you can see in the code it has a state paymentActionList which can be populated with any custom payment action you want to perform when the \"place order\" action happens. See the registerPaymentAction function. This function is available for all the child components and thus a custom payment method component can use it to register a custom \"place order\" behaviour. Suppose you have a custom payment method component PayOneCreditCard and it looks like below function PayOneCreditCard({ method, selected, actions }) { const { registerPaymentAction } = useCheckoutFormContext(); // custom \"place order\" submit action const paymentSubmitHandler = useCallback( async values => { console.log({ values }); alert('yeeeha'); }, [] ); // registering custom \"place order\" action for the payment method useEffect(() => { registerPaymentAction('payone_creditcard', paymentSubmitHandler); }, [registerPaymentAction, paymentSubmitHandler]); return ( // custom payment method JSX here ); } So in the useEffect , we are registering custom place order action for the payment method. Now when the user opted payone_creditcard as the payment option and then click on the \"Place Order\" button, it will use the paymentSubmitHandler in this component to process the order. So now the payment method needs to convert the quote to order according to its need and then redirect the user to the success page.","title":"How To Interact With Place Order"}]}